---
title: "01_prepr"
format: html
editor: visual
---

## 1. PEM Preparation Steps

This template provides a guide to help guide you through the PEM workflow.

## Read in library 

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r,eval=FALSE}
library(PEMprepr)

project_name <- "{{ aoi_name }}"

fid <- read_fid()

```

## Prepare base data

Set up base spatial file to define the area of interest.

If you have previously supplied a spatial file when creating the PEMr project, you will find a copy of your spatial file located within the folder "00_raw_inputs/10_vector/". 

Spatial files are all set to run with BC Albers projection (EPSG:3005). 


1. The first step is to prepare aoi by snapping to a common grid (100m). This can be expanded or shrunk for the raw spatial data file provided. 


```{r, eval=FALSE}

#aoi <- snap_aoi("datecreek_aoi.gpkg")
# I had some issues with just using the name as not able to detect file in location

aoi <- snap_aoi(aoi = file.path("00_raw_inputs","10_vector","datecreek_aoi.gpkg"),  write_output =FALSE)


```


## Works up to here

Create the base vector data. This function will create a set of base layers retrieved from bcdata. 

```{r, eval=FALSE}
create_base_vectors(aoi, out_dir = file.path("00_raw_inputs","10_vector","datecreek_aoi.gpkg"))

```


These rasters may need to be reviewed, specifically the roads layer () and ften layers. 

Once reviewed and edited in place we can copy the edited version to a new file location. 


```{r, eval=FALSE}

copy_clean_vectors()


```


###############################
# Prepare Raster Data

# create a blank raster template

```{r, eval = FALSE}

r5 <- create_template(res = 5)
r25 <- create_template(res = 25)
aoi_bb <- file.path(fid$shape_dir_1010[2], "aoi_ls_snap.gpkg")
r25_ls <- create_template(aoi_bb = aoi_bb, res = 25, filename = "template_ls.tif")


# read in base DEM and align the dEM
dem <- terra::rast(file.path(fid$cov_dir_1020[2], paste0(res_scale, "m"), "dem.tif"))

## OR alternatively read in TRIM raster

get_trim_dem(
  aoi_bb = file.path(fid$shape_dir_1010[2], "aoi_snapped.gpkg"),
  res = 25, out_dir = fid$cov_dir_1020[2]
)

get_trim_dem(res = 5)

get_trim_dem(
  aoi_bb = file.path(fid$shape_dir_1010[2], "aoi_ls_snap.gpkg"),
  res = 25, filename = "dem_ls.tif"
)

```


```{r}
layer_options <- c(
  "sinksfilled", "sinkroute", "dem_preproc", "slope_aspect_curve",
  "tcatchment", "tca", "scatchment", "twi", "channelsnetwork",
  "overlandflow", "overlandflow2", "multiresflatness", "multiresflatness2",
  "multiresflatness3", "tri", "convergence", "openness",
  "dah", "tpi", "ridgevalley", "mrn", "flowaccumulation",
  "slopelength", "flowaccumulation2", "flowaccumulation3",
  "flowpathlength", "flowpathlength2", "flowpathlength3", "lsfactor",
  "solarrad", "convexity", "vertdistance", "tci_low",
  "swi", "windexp", "texture", "protection", "vrm",
  "mbi", "mscale_tpi", "relposition", "slopecurvatures",
  "steepestslope", "upslopearea"
)

# run a test covariate
create_covariates(
  dtm = dem, ## raster created above
  SAGApath = "C:/SAGA/saga-7.7.0_x64/", ## Where SAGA GIS is installed
  output = file.path(fid$cov_dir_1020[2], "25m"), ## from the setup_folders above
  layers = "sinksfilled"
) ## test one is working

# run all covariates
create_covariates(
  dtm = dem, ## raster created above
  SAGApath = "C:/SAGA/saga-7.7.0_x64/", ## Where SAGA GIS is installed
  output = file.path(fid$cov_dir_1020[2], "25m"), ## from the setup_folders above
  layers = c("all")
) ## use all or one of the above


l <- list.files(
  path = fid$cov_dir_1020[2], pattern = ".sdat$",
  recursive = TRUE
)

```



# generate BEC

bec_sf <- sf::st_read(file.path(fid$shape_dir_1010[1], "bec.gpkg")) %>%
  sf::st_cast(., "MULTIPOLYGON")

bec_rast <- create_bgc_template(bec_sf,
  field = "MAP_LABEL", template = r25,
  outpath = fid$cov_dir_1020[2]
)

```
